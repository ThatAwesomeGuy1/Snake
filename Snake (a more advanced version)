
import pygame
import random
import sys

pygame.init()


SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
CELL_SIZE = 20
GRID_WIDTH = SCREEN_WIDTH // CELL_SIZE
GRID_HEIGHT = SCREEN_HEIGHT // CELL_SIZE

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
PURPLE = (255, 0, 255)
ORANGE = (255, 165, 0)
GRAY = (128, 128, 128)

screen = pygame.display.set_mode([SCREEN_WIDTH, SCREEN_HEIGHT])
pygame.display.set_caption("Snake")
clock = pygame.time.Clock()
font = pygame.font.Font(None, 36)
big_font = pygame.font.Font(None, 72)

class GameState:
    MENU = 0
    PLAYING = 1
    DEAD = 2
    LEVEL_COMPLETE = 3

class Apple:
    def __init__(self, apple_type="normal"):
        self.type = apple_type
        self.randomize_position()
        
    def randomize_position(self):
        self.x = random.randint(0, GRID_WIDTH - 1) * CELL_SIZE
        self.y = random.randint(0, GRID_HEIGHT - 1) * CELL_SIZE
        
    def draw(self, screen):
        color = RED
        if self.type == "speed":
            color = YELLOW
        elif self.type == "grow":
            color = BLUE
        elif self.type == "shrink":
            color = PURPLE
        elif self.type == "bonus":
            color = ORANGE
            
        pygame.draw.rect(screen, color, (self.x, self.y, CELL_SIZE, CELL_SIZE))
        
    def get_effect(self):
        effects = {
            "normal": {"points": 1, "grow": 1, "speed_change": 0},
            "speed": {"points": 2, "grow": 1, "speed_change": 2},
            "grow": {"points": 1, "grow": 3, "speed_change": 0},
            "shrink": {"points": 3, "grow": -1, "speed_change": 0},
            "bonus": {"points": 5, "grow": 1, "speed_change": 0}
        }
        return effects.get(self.type, effects["normal"])

class Obstacle:
    def __init__(self, x, y):
        self.x = x * CELL_SIZE
        self.y = y * CELL_SIZE
        
    def draw(self, screen):
        pygame.draw.rect(screen, GRAY, (self.x, self.y, CELL_SIZE, CELL_SIZE))

class Snake:
    def __init__(self):
        self.reset()
        
    def reset(self):
        start_x = GRID_WIDTH // 2 * CELL_SIZE
        start_y = GRID_HEIGHT // 2 * CELL_SIZE
        self.body = [(int(start_x), int(start_y))]
        self.velocity = [0, 0]
        self.grow_pending = 0
        
    def move(self):
        if self.velocity == [0, 0]:
            return True
            
        head_x, head_y = self.body[0]
        new_head = (head_x + self.velocity[0], head_y + self.velocity[1])
        
      
        if (new_head[0] < 0 or new_head[0] >= SCREEN_WIDTH or 
            new_head[1] < 0 or new_head[1] >= SCREEN_HEIGHT):
            return False
            
       
        if new_head in self.body:
            return False
            
        self.body.insert(0, new_head)
        
        if self.grow_pending > 0:
            self.grow_pending -= 1
        else:
            self.body.pop()
            
        return True
        
    def grow(self, amount):
        self.grow_pending += amount
        
    def shrink(self):
        if len(self.body) > 1:
            self.body.pop()
            
    def draw(self, screen):
        for segment in self.body:
            pygame.draw.rect(screen, GREEN, (*segment, CELL_SIZE, CELL_SIZE))
            
    def check_collision_with_obstacles(self, obstacles):
        head = self.body[0]
        for obstacle in obstacles:
            if head[0] == obstacle.x and head[1] == obstacle.y:
                return True
        return False

class Game:
    def __init__(self):
        self.state = GameState.MENU
        self.snake = Snake()
        self.level = 1
        self.score = 0
        self.apples_needed = 5
        self.apples_collected = 0
        self.apples = []
        self.obstacles = []
        self.game_speed = 8
        self.setup_level()
        
    def setup_level(self):
        self.apples = []
        self.obstacles = []
        self.apples_collected = 0
        self.apples_needed = 5 + (self.level - 1) * 2
        
       
        obstacle_count = min(self.level * 2, 15)
        placed_obstacles = []
        
        for _ in range(obstacle_count):
            attempts = 0
            while attempts < 50:  
                x = random.randint(1, GRID_WIDTH - 2)
                y = random.randint(1, GRID_HEIGHT - 2)
                obstacle_pos = (x * CELL_SIZE, y * CELL_SIZE)
                
                
                if (obstacle_pos not in self.snake.body and 
                    obstacle_pos not in placed_obstacles):
                    self.obstacles.append(Obstacle(x, y))
                    placed_obstacles.append(obstacle_pos)
                    break
                attempts += 1
                    
        
        self.spawn_apple()
        
    def spawn_apple(self):
        apple_types = ["normal", "normal", "normal", "speed", "grow", "shrink", "bonus"]
       
        if self.level > 3:
            apple_types.extend(["speed", "grow", "bonus"])
        if self.level > 6:
            apple_types.extend(["bonus", "bonus"])
            
        attempts = 0
        while attempts < 50:  
            apple = Apple(random.choice(apple_types))
            apple_pos = (apple.x, apple.y)
            
            
            valid_position = True
            if apple_pos in self.snake.body:
                valid_position = False
            
            for obstacle in self.obstacles:
                if apple.x == obstacle.x and apple.y == obstacle.y:
                    valid_position = False
                    break
            
            
            for existing_apple in self.apples:
                if apple.x == existing_apple.x and apple.y == existing_apple.y:
                    valid_position = False
                    break
                    
            if valid_position:
                self.apples.append(apple)
                break
            attempts += 1
                
    def handle_input(self, event):
        if self.state == GameState.MENU:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    self.start_game()
                elif event.key == pygame.K_q:
                    pygame.quit()
                    sys.exit()
                    
        elif self.state == GameState.PLAYING:
            if event.type == pygame.KEYDOWN:
                if event.key in [pygame.K_UP, pygame.K_w]:
                    if self.snake.velocity != [0, CELL_SIZE]:
                        self.snake.velocity = [0, -CELL_SIZE]
                elif event.key in [pygame.K_DOWN, pygame.K_s]:
                    if self.snake.velocity != [0, -CELL_SIZE]:
                        self.snake.velocity = [0, CELL_SIZE]
                elif event.key in [pygame.K_LEFT, pygame.K_a]:
                    if self.snake.velocity != [CELL_SIZE, 0]:
                        self.snake.velocity = [-CELL_SIZE, 0]
                elif event.key in [pygame.K_RIGHT, pygame.K_d]:
                    if self.snake.velocity != [-CELL_SIZE, 0]:
                        self.snake.velocity = [CELL_SIZE, 0]
                        
        elif self.state == GameState.DEAD:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:
                    self.restart_game()
                elif event.key == pygame.K_m:
                    self.state = GameState.MENU
                elif event.key == pygame.K_q:
                    pygame.quit()
                    sys.exit()
                    
        elif self.state == GameState.LEVEL_COMPLETE:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    self.next_level()
                    
    def start_game(self):
        self.state = GameState.PLAYING
        self.snake.reset()
        self.level = 1
        self.score = 0
        self.game_speed = 8
        self.setup_level()
        
    def restart_game(self):
        self.snake.reset()
        self.setup_level()
        self.score = 0
        self.state = GameState.PLAYING
        
    def next_level(self):
        self.level += 1
        self.game_speed = min(15, 8 + self.level)
        self.snake.reset()
        self.setup_level()
        self.state = GameState.PLAYING
        
    def update(self):
        if self.state == GameState.PLAYING:
            if not self.snake.move():
                self.state = GameState.DEAD
                return
                
          
            if self.snake.check_collision_with_obstacles(self.obstacles):
                self.state = GameState.DEAD
                return
                
           
            head = self.snake.body[0]
            for apple in self.apples[:]:
                if head[0] == apple.x and head[1] == apple.y:
                    effect = apple.get_effect()
                    self.score += effect["points"]
                    
                    if effect["grow"] > 0:
                        self.snake.grow(effect["grow"])
                    elif effect["grow"] < 0:
                        self.snake.shrink()
                        
                    if effect["speed_change"] != 0:
                        self.game_speed = max(5, min(20, self.game_speed + effect["speed_change"]))
                        
                    self.apples.remove(apple)
                    self.apples_collected += 1
                    
                   
                    if self.apples_collected >= self.apples_needed:
                        self.state = GameState.LEVEL_COMPLETE
                        return
                        
                    
                    self.spawn_apple()
                    break
                    
    def draw_menu(self):
        screen.fill(BLACK)
        
        title = big_font.render("SNAKE", True, GREEN)
        title_rect = title.get_rect(center=(SCREEN_WIDTH // 2, 150))
        screen.blit(title, title_rect)
        
        instructions = [
            "SPACE - Start Game",
            "WASD/Arrow Keys - Move",
            "Q - Quit",
            "(Levels 5 and beyond are impossible)",
            "Apple Types:",
            "Red - Normal (+1 point)",
            "Yellow - Speed (+2 points, faster)",
            "Blue - Grow (+1 point, +3 segments)",
            "Purple - Shrink (+3 points, -1 segment)",
            "Orange - Bonus (+5 points)"
            "Gray - Obstacles (Game Over)"  
        ]
        
        y = 250
        for instruction in instructions:
            text = font.render(instruction, True, WHITE)
            text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, y))
            screen.blit(text, text_rect)
            y += 30
            
    def draw_game(self):
        screen.fill(BLACK)
        
      
        for obstacle in self.obstacles:
            obstacle.draw(screen)
            
  
        self.snake.draw(screen)
        
     
        for apple in self.apples:
            apple.draw(screen)
            

        score_text = font.render(f"Score: {self.score}", True, WHITE)
        screen.blit(score_text, (10, 10))
        
        level_text = font.render(f"Level: {self.level}", True, WHITE)
        screen.blit(level_text, (10, 40))
        
        progress_text = font.render(f"Apples: {self.apples_collected}/{self.apples_needed}", True, WHITE)
        screen.blit(progress_text, (10, 70))
        
    def draw_death_screen(self):
        screen.fill(BLACK)
        
        
        death_text = big_font.render("YOU DIED", True, RED)
        death_rect = death_text.get_rect(center=(SCREEN_WIDTH // 2, 200))
        screen.blit(death_text, death_rect)
        
        
        stats = [
            f"Final Score: {self.score}",
            f"Level Reached: {self.level}",
            f"Apples Collected: {self.apples_collected}",
            "",
            "R - Restart Level",
            "M - Main Menu",
            "Q - Quit"
        ]
        
        y = 300
        for stat in stats:
            text = font.render(stat, True, WHITE)
            text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, y))
            screen.blit(text, text_rect)
            y += 30
            
    def draw_level_complete(self):
        screen.fill(BLACK)
        
        complete_text = big_font.render("LEVEL COMPLETE!", True, GREEN)
        complete_rect = complete_text.get_rect(center=(SCREEN_WIDTH // 2, 200))
        screen.blit(complete_text, complete_rect)
        
        stats = [
            f"Score: {self.score}",
            f"Level {self.level} Complete!",
            "",
            "SPACE - Next Level"
        ]
        
        y = 300
        for stat in stats:
            text = font.render(stat, True, WHITE)
            text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, y))
            screen.blit(text, text_rect)
            y += 30
            
    def draw(self):
        if self.state == GameState.MENU:
            self.draw_menu()
        elif self.state == GameState.PLAYING:
            self.draw_game()
        elif self.state == GameState.DEAD:
            self.draw_death_screen()
        elif self.state == GameState.LEVEL_COMPLETE:
            self.draw_level_complete()
            
        pygame.display.flip()


game = Game()
running = True

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        else:
            game.handle_input(event)
            
    game.update()
    game.draw()
    clock.tick(game.game_speed)

pygame.quit()
sys.exit()
